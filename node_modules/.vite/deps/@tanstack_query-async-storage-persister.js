import "./chunk-G3PMV62Z.js";

// node_modules/@tanstack/query-async-storage-persister/build/modern/utils.js
function noop() {
}

// node_modules/@tanstack/query-async-storage-persister/build/modern/asyncThrottle.js
function asyncThrottle(func, { interval = 1e3, onError = noop } = {}) {
  if (typeof func !== "function") throw new Error("argument is not function.");
  let nextExecutionTime = 0;
  let lastArgs = null;
  let isExecuting = false;
  let isScheduled = false;
  return async (...args) => {
    lastArgs = args;
    if (isScheduled) return;
    isScheduled = true;
    while (isExecuting) {
      await new Promise((done) => setTimeout(done, interval));
    }
    while (Date.now() < nextExecutionTime) {
      await new Promise(
        (done) => setTimeout(done, nextExecutionTime - Date.now())
      );
    }
    isScheduled = false;
    isExecuting = true;
    try {
      await func(...lastArgs);
    } catch (error) {
      try {
        onError(error);
      } catch {
      }
    }
    nextExecutionTime = Date.now() + interval;
    isExecuting = false;
  };
}

// node_modules/@tanstack/query-async-storage-persister/build/modern/index.js
var createAsyncStoragePersister = ({
  storage,
  key = `REACT_QUERY_OFFLINE_CACHE`,
  throttleTime = 1e3,
  serialize = JSON.stringify,
  deserialize = JSON.parse,
  retry
}) => {
  if (storage) {
    const trySave = async (persistedClient) => {
      try {
        const serialized = await serialize(persistedClient);
        await storage.setItem(key, serialized);
        return;
      } catch (error) {
        return error;
      }
    };
    return {
      persistClient: asyncThrottle(
        async (persistedClient) => {
          let client = persistedClient;
          let error = await trySave(client);
          let errorCount = 0;
          while (error && client) {
            errorCount++;
            client = await retry?.({
              persistedClient: client,
              error,
              errorCount
            });
            if (client) {
              error = await trySave(client);
            }
          }
        },
        { interval: throttleTime }
      ),
      restoreClient: async () => {
        const cacheString = await storage.getItem(key);
        if (!cacheString) {
          return;
        }
        return await deserialize(cacheString);
      },
      removeClient: () => storage.removeItem(key)
    };
  }
  return {
    persistClient: noop,
    restoreClient: () => Promise.resolve(void 0),
    removeClient: noop
  };
};
export {
  createAsyncStoragePersister
};
//# sourceMappingURL=@tanstack_query-async-storage-persister.js.map
